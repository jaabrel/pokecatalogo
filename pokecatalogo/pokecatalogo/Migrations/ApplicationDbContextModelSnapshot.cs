// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using pokecatalogo.Data;

#nullable disable

namespace pokecatalogo.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AtaquePokemon", b =>
                {
                    b.Property<int>("PokemonAtaquesId")
                        .HasColumnType("int");

                    b.Property<int>("PokemonId")
                        .HasColumnType("int");

                    b.HasKey("PokemonAtaquesId", "PokemonId");

                    b.HasIndex("PokemonId");

                    b.ToTable("AtaquePokemon");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a",
                            Name = "Administrador",
                            NormalizedName = "ADMINISTRADOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "admin",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fe626d10-17f8-4768-8818-895627758300",
                            Email = "admin@mail.pt",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MAIL.PT",
                            NormalizedUserName = "ADMIN@MAIL.PT",
                            PasswordHash = "AQAAAAIAAYagAAAAEKldZ7+5+z8CcQT1Ympxy7ULMdLOs5NtCJ/dbxxUnMU2fA/weIwvm8HieQ+2xKFLJg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1bcbd0a7-5c9d-4510-811a-cd5eee6c0dbe",
                            TwoFactorEnabled = false,
                            UserName = "admin@mail.pt"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "admin",
                            RoleId = "a"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PokemonTipo", b =>
                {
                    b.Property<int>("PokemonsId")
                        .HasColumnType("int");

                    b.Property<int>("TiposId")
                        .HasColumnType("int");

                    b.HasKey("PokemonsId", "TiposId");

                    b.HasIndex("TiposId");

                    b.ToTable("PokemonTipo");
                });

            modelBuilder.Entity("pokecatalogo.Models.Ataque", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Categoria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Dano")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PP")
                        .HasColumnType("int");

                    b.Property<int?>("PokemonEquipaId")
                        .HasColumnType("int");

                    b.Property<int>("Precisao")
                        .HasColumnType("int");

                    b.Property<int>("Prioridade")
                        .HasColumnType("int");

                    b.Property<int>("TipoFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PokemonEquipaId");

                    b.HasIndex("TipoFk");

                    b.ToTable("Ataques");
                });

            modelBuilder.Entity("pokecatalogo.Models.Equipa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AtaqueId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DonoFk")
                        .HasColumnType("int");

                    b.Property<string>("NomeEquipa")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AtaqueId");

                    b.HasIndex("DonoFk");

                    b.ToTable("Equipas");
                });

            modelBuilder.Entity("pokecatalogo.Models.Evolucao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PokemonFk1")
                        .HasColumnType("int");

                    b.Property<int?>("PokemonFk2")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PokemonFk1");

                    b.HasIndex("PokemonFk2")
                        .IsUnique()
                        .HasFilter("[PokemonFk2] IS NOT NULL");

                    b.ToTable("Evolucoes");
                });

            modelBuilder.Entity("pokecatalogo.Models.Habilidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PokemonFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PokemonFk");

                    b.ToTable("Habilidades");
                });

            modelBuilder.Entity("pokecatalogo.Models.Jogo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataLancamento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Jogos");
                });

            modelBuilder.Entity("pokecatalogo.Models.Localizacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Localizacoes");
                });

            modelBuilder.Entity("pokecatalogo.Models.LocalizacaoJogo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("JogoFk")
                        .HasColumnType("int");

                    b.Property<int>("LocalizacaoFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JogoFk");

                    b.HasIndex("LocalizacaoFk");

                    b.ToTable("LocalizacaoJogos");
                });

            modelBuilder.Entity("pokecatalogo.Models.Pokemon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Altura")
                        .HasColumnType("real");

                    b.Property<string>("DescricaoPokedex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Especie")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EvolucaoAnteriorFk")
                        .HasColumnType("int");

                    b.Property<string>("Imagem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagemShiny")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LocalizacaoId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Peso")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("LocalizacaoId");

                    b.ToTable("Pokemons");
                });

            modelBuilder.Entity("pokecatalogo.Models.PokemonEquipa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Alcunha")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("EquipaFk")
                        .HasColumnType("int");

                    b.Property<int?>("HabilidadeFk")
                        .HasColumnType("int");

                    b.Property<int>("Nivel")
                        .HasColumnType("int");

                    b.Property<int>("PokemonFk")
                        .HasColumnType("int");

                    b.Property<int>("PosicaoNaEquipa")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipaFk");

                    b.HasIndex("HabilidadeFk");

                    b.HasIndex("PokemonFk");

                    b.ToTable("PokemonEquipas");
                });

            modelBuilder.Entity("pokecatalogo.Models.PokemonHabilidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HabilidadeFk")
                        .HasColumnType("int");

                    b.Property<int>("PokemonFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HabilidadeFk");

                    b.HasIndex("PokemonFk");

                    b.ToTable("PokemonHabilidades");
                });

            modelBuilder.Entity("pokecatalogo.Models.PokemonLocalizacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LocalizacaoFk")
                        .HasColumnType("int");

                    b.Property<int>("PokemonFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocalizacaoFk");

                    b.HasIndex("PokemonFk");

                    b.ToTable("PokemonLocalizacoes");
                });

            modelBuilder.Entity("pokecatalogo.Models.PokemonStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Atk")
                        .HasColumnType("int");

                    b.Property<int>("Def")
                        .HasColumnType("int");

                    b.Property<int>("Hp")
                        .HasColumnType("int");

                    b.Property<int>("PokemonFk")
                        .HasColumnType("int");

                    b.Property<int>("SpA")
                        .HasColumnType("int");

                    b.Property<int>("SpD")
                        .HasColumnType("int");

                    b.Property<int>("Speed")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PokemonFk");

                    b.ToTable("PokemonStats");
                });

            modelBuilder.Entity("pokecatalogo.Models.Tipo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Efetivo")
                        .HasColumnType("int");

                    b.Property<int>("Fraquezas")
                        .HasColumnType("int");

                    b.Property<int?>("Imunidades")
                        .HasColumnType("int");

                    b.Property<int>("Nome")
                        .HasColumnType("int");

                    b.Property<int?>("Resistências")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Tipos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cor = "#A8A878",
                            Fraquezas = 6,
                            Imunidades = 13,
                            Nome = 0
                        },
                        new
                        {
                            Id = 2,
                            Cor = "#F08030",
                            Efetivo = 4,
                            Fraquezas = 2,
                            Nome = 1,
                            Resistências = 16
                        },
                        new
                        {
                            Id = 3,
                            Cor = "#6890F0",
                            Efetivo = 12,
                            Fraquezas = 4,
                            Nome = 2,
                            Resistências = 1
                        },
                        new
                        {
                            Id = 4,
                            Cor = "#F8D030",
                            Efetivo = 2,
                            Fraquezas = 8,
                            Nome = 3,
                            Resistências = 9
                        },
                        new
                        {
                            Id = 5,
                            Cor = "#78C850",
                            Efetivo = 8,
                            Fraquezas = 1,
                            Nome = 4,
                            Resistências = 2
                        },
                        new
                        {
                            Id = 6,
                            Cor = "#98D8D8",
                            Efetivo = 9,
                            Fraquezas = 1,
                            Nome = 5,
                            Resistências = 5
                        },
                        new
                        {
                            Id = 7,
                            Cor = "#C03028",
                            Efetivo = 0,
                            Fraquezas = 10,
                            Nome = 6,
                            Resistências = 12
                        },
                        new
                        {
                            Id = 8,
                            Cor = "#A040A0",
                            Efetivo = 17,
                            Fraquezas = 8,
                            Nome = 7,
                            Resistências = 4
                        },
                        new
                        {
                            Id = 9,
                            Cor = "#E0C068",
                            Efetivo = 16,
                            Fraquezas = 2,
                            Imunidades = 3,
                            Nome = 8,
                            Resistências = 7
                        },
                        new
                        {
                            Id = 10,
                            Cor = "#A890F0",
                            Efetivo = 6,
                            Fraquezas = 3,
                            Imunidades = 8,
                            Nome = 9,
                            Resistências = 4
                        },
                        new
                        {
                            Id = 11,
                            Cor = "#F85888",
                            Efetivo = 7,
                            Fraquezas = 15,
                            Nome = 10,
                            Resistências = 6
                        },
                        new
                        {
                            Id = 12,
                            Cor = "#A8B820",
                            Efetivo = 10,
                            Fraquezas = 1,
                            Nome = 11,
                            Resistências = 4
                        },
                        new
                        {
                            Id = 13,
                            Cor = "#B8A038",
                            Efetivo = 11,
                            Fraquezas = 2,
                            Nome = 12,
                            Resistências = 0
                        },
                        new
                        {
                            Id = 14,
                            Cor = "#705898",
                            Efetivo = 10,
                            Fraquezas = 15,
                            Imunidades = 0,
                            Nome = 13,
                            Resistências = 7
                        },
                        new
                        {
                            Id = 15,
                            Cor = "#7038F8",
                            Efetivo = 14,
                            Fraquezas = 17,
                            Nome = 14,
                            Resistências = 1
                        },
                        new
                        {
                            Id = 16,
                            Cor = "#705848",
                            Efetivo = 13,
                            Fraquezas = 6,
                            Imunidades = 10,
                            Nome = 15,
                            Resistências = 13
                        },
                        new
                        {
                            Id = 17,
                            Cor = "#B8B8D0",
                            Efetivo = 12,
                            Fraquezas = 1,
                            Imunidades = 7,
                            Nome = 16,
                            Resistências = 17
                        },
                        new
                        {
                            Id = 18,
                            Cor = "#EE99AC",
                            Efetivo = 15,
                            Fraquezas = 16,
                            Imunidades = 14,
                            Nome = 17,
                            Resistências = 6
                        });
                });

            modelBuilder.Entity("pokecatalogo.Models.Utilizadores", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Utilizadores");
                });

            modelBuilder.Entity("AtaquePokemon", b =>
                {
                    b.HasOne("pokecatalogo.Models.Ataque", null)
                        .WithMany()
                        .HasForeignKey("PokemonAtaquesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pokecatalogo.Models.Pokemon", null)
                        .WithMany()
                        .HasForeignKey("PokemonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PokemonTipo", b =>
                {
                    b.HasOne("pokecatalogo.Models.Pokemon", null)
                        .WithMany()
                        .HasForeignKey("PokemonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pokecatalogo.Models.Tipo", null)
                        .WithMany()
                        .HasForeignKey("TiposId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("pokecatalogo.Models.Ataque", b =>
                {
                    b.HasOne("pokecatalogo.Models.PokemonEquipa", null)
                        .WithMany("Ataques")
                        .HasForeignKey("PokemonEquipaId");

                    b.HasOne("pokecatalogo.Models.Tipo", "Tipo")
                        .WithMany()
                        .HasForeignKey("TipoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tipo");
                });

            modelBuilder.Entity("pokecatalogo.Models.Equipa", b =>
                {
                    b.HasOne("pokecatalogo.Models.Ataque", null)
                        .WithMany("Equipas")
                        .HasForeignKey("AtaqueId");

                    b.HasOne("pokecatalogo.Models.Utilizadores", "Dono")
                        .WithMany("ListaEquipas")
                        .HasForeignKey("DonoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dono");
                });

            modelBuilder.Entity("pokecatalogo.Models.Evolucao", b =>
                {
                    b.HasOne("pokecatalogo.Models.Pokemon", "PokemonOrigem")
                        .WithMany("FinalEvolucoes")
                        .HasForeignKey("PokemonFk1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pokecatalogo.Models.Pokemon", "PokemonEvoluido")
                        .WithOne("EvolucaoAnterior")
                        .HasForeignKey("pokecatalogo.Models.Evolucao", "PokemonFk2");

                    b.Navigation("PokemonEvoluido");

                    b.Navigation("PokemonOrigem");
                });

            modelBuilder.Entity("pokecatalogo.Models.Habilidade", b =>
                {
                    b.HasOne("pokecatalogo.Models.Pokemon", "Pokemon")
                        .WithMany()
                        .HasForeignKey("PokemonFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pokemon");
                });

            modelBuilder.Entity("pokecatalogo.Models.LocalizacaoJogo", b =>
                {
                    b.HasOne("pokecatalogo.Models.Jogo", "Jogo")
                        .WithMany("LocalizacaoJogos")
                        .HasForeignKey("JogoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pokecatalogo.Models.Localizacao", "Localizacao")
                        .WithMany("LocalizacaoJogos")
                        .HasForeignKey("LocalizacaoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Jogo");

                    b.Navigation("Localizacao");
                });

            modelBuilder.Entity("pokecatalogo.Models.Pokemon", b =>
                {
                    b.HasOne("pokecatalogo.Models.Localizacao", null)
                        .WithMany("Pokemons")
                        .HasForeignKey("LocalizacaoId");
                });

            modelBuilder.Entity("pokecatalogo.Models.PokemonEquipa", b =>
                {
                    b.HasOne("pokecatalogo.Models.Equipa", "Equipa")
                        .WithMany("Pokemons")
                        .HasForeignKey("EquipaFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pokecatalogo.Models.Habilidade", "Habilidade")
                        .WithMany()
                        .HasForeignKey("HabilidadeFk");

                    b.HasOne("pokecatalogo.Models.Pokemon", "Pokemon")
                        .WithMany()
                        .HasForeignKey("PokemonFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipa");

                    b.Navigation("Habilidade");

                    b.Navigation("Pokemon");
                });

            modelBuilder.Entity("pokecatalogo.Models.PokemonHabilidade", b =>
                {
                    b.HasOne("pokecatalogo.Models.Habilidade", "Habilidade")
                        .WithMany("PokemonHabilidades")
                        .HasForeignKey("HabilidadeFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pokecatalogo.Models.Pokemon", "Pokemon")
                        .WithMany("PokemonHabilidades")
                        .HasForeignKey("PokemonFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Habilidade");

                    b.Navigation("Pokemon");
                });

            modelBuilder.Entity("pokecatalogo.Models.PokemonLocalizacao", b =>
                {
                    b.HasOne("pokecatalogo.Models.Localizacao", "Localizacao")
                        .WithMany()
                        .HasForeignKey("LocalizacaoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pokecatalogo.Models.Pokemon", "Pokemon")
                        .WithMany("PokemonLocalizacoes")
                        .HasForeignKey("PokemonFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Localizacao");

                    b.Navigation("Pokemon");
                });

            modelBuilder.Entity("pokecatalogo.Models.PokemonStats", b =>
                {
                    b.HasOne("pokecatalogo.Models.Pokemon", "Pokemon")
                        .WithMany("PokemonStats")
                        .HasForeignKey("PokemonFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pokemon");
                });

            modelBuilder.Entity("pokecatalogo.Models.Ataque", b =>
                {
                    b.Navigation("Equipas");
                });

            modelBuilder.Entity("pokecatalogo.Models.Equipa", b =>
                {
                    b.Navigation("Pokemons");
                });

            modelBuilder.Entity("pokecatalogo.Models.Habilidade", b =>
                {
                    b.Navigation("PokemonHabilidades");
                });

            modelBuilder.Entity("pokecatalogo.Models.Jogo", b =>
                {
                    b.Navigation("LocalizacaoJogos");
                });

            modelBuilder.Entity("pokecatalogo.Models.Localizacao", b =>
                {
                    b.Navigation("LocalizacaoJogos");

                    b.Navigation("Pokemons");
                });

            modelBuilder.Entity("pokecatalogo.Models.Pokemon", b =>
                {
                    b.Navigation("EvolucaoAnterior");

                    b.Navigation("FinalEvolucoes");

                    b.Navigation("PokemonHabilidades");

                    b.Navigation("PokemonLocalizacoes");

                    b.Navigation("PokemonStats");
                });

            modelBuilder.Entity("pokecatalogo.Models.PokemonEquipa", b =>
                {
                    b.Navigation("Ataques");
                });

            modelBuilder.Entity("pokecatalogo.Models.Utilizadores", b =>
                {
                    b.Navigation("ListaEquipas");
                });
#pragma warning restore 612, 618
        }
    }
}
