// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using pokecatalogo.Data;

#nullable disable

namespace pokecatalogo.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.15");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a",
                            Name = "Administrador",
                            NormalizedName = "ADMINISTRADOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "admin",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d9b5647d-e552-47c6-8bc9-a13f4f442293",
                            Email = "admin@mail.pt",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MAIL.PT",
                            NormalizedUserName = "ADMIN@MAIL.PT",
                            PasswordHash = "AQAAAAIAAYagAAAAEP4SkmPxrpLaIlDUVcGOfbH6mKX/JA+MJ+c0zyNUGPvkm1uG9Ll9iQBxoEXU5U2cJw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e3379938-ad6c-4865-9a74-feb17f7e92a6",
                            TwoFactorEnabled = false,
                            UserName = "admin@mail.pt"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "admin",
                            RoleId = "a"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("pokecatalogo.Models.Ataque", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Categoria")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<int>("TipoFk")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TipoFk");

                    b.ToTable("Ataques");
                });

            modelBuilder.Entity("pokecatalogo.Models.Equipa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("DonoFk")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NomeEquipa")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DonoFk");

                    b.ToTable("Equipa");
                });

            modelBuilder.Entity("pokecatalogo.Models.Evolucao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<int>("PokemonFk1")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PokemonFk2")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PokemonFk1");

                    b.HasIndex("PokemonFk2");

                    b.ToTable("Evolucoes");
                });

            modelBuilder.Entity("pokecatalogo.Models.Habilidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PokemonFk")
                        .HasColumnType("INTEGER");

                    b.Property<string>("nome")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PokemonFk");

                    b.ToTable("Habilidades");
                });

            modelBuilder.Entity("pokecatalogo.Models.Jogo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Jogos");
                });

            modelBuilder.Entity("pokecatalogo.Models.Localizacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Localizacoes");
                });

            modelBuilder.Entity("pokecatalogo.Models.LocalizacaoJogo", b =>
                {
                    b.Property<int>("LocalizacaoFk")
                        .HasColumnType("INTEGER");

                    b.Property<int>("JogoFk")
                        .HasColumnType("INTEGER");

                    b.HasKey("LocalizacaoFk", "JogoFk");

                    b.HasIndex("JogoFk");

                    b.ToTable("LocalizacaoJogos");
                });

            modelBuilder.Entity("pokecatalogo.Models.Pokemon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LocalizacaoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<int>("Tipo1Fk")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Tipo2Fk")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LocalizacaoId");

                    b.HasIndex("Tipo1Fk");

                    b.HasIndex("Tipo2Fk");

                    b.ToTable("Pokemons");
                });

            modelBuilder.Entity("pokecatalogo.Models.PokemonAtaque", b =>
                {
                    b.Property<int>("PokemonFk")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AtaqueFk")
                        .HasColumnType("INTEGER");

                    b.HasKey("PokemonFk", "AtaqueFk");

                    b.HasIndex("AtaqueFk");

                    b.ToTable("PokemonAtaques");
                });

            modelBuilder.Entity("pokecatalogo.Models.PokemonEquipa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EquipaFk")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PokemonFk")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EquipaFk");

                    b.HasIndex("PokemonFk");

                    b.ToTable("PokemonEquipas");
                });

            modelBuilder.Entity("pokecatalogo.Models.PokemonHabilidade", b =>
                {
                    b.Property<int>("PokemonFk")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HabilidadeFk")
                        .HasColumnType("INTEGER");

                    b.HasKey("PokemonFk", "HabilidadeFk");

                    b.HasIndex("HabilidadeFk");

                    b.ToTable("PokemonHabilidades");
                });

            modelBuilder.Entity("pokecatalogo.Models.PokemonLocalizacao", b =>
                {
                    b.Property<int>("PokemonFk")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocalizacaoFk")
                        .HasColumnType("INTEGER");

                    b.HasKey("PokemonFk", "LocalizacaoFk");

                    b.HasIndex("LocalizacaoFk");

                    b.ToTable("PokemonLocalizacoes");
                });

            modelBuilder.Entity("pokecatalogo.Models.PokemonStats", b =>
                {
                    b.Property<int>("PokemonFk")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Atk")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Def")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Hp")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SpA")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SpD")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Speed")
                        .HasColumnType("INTEGER");

                    b.HasKey("PokemonFk");

                    b.ToTable("PokemonStats");
                });

            modelBuilder.Entity("pokecatalogo.Models.Tipo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Fraquezas")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tipos");
                });

            modelBuilder.Entity("pokecatalogo.Models.Utilizadores", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IdentityUserName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Utilizadores");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("pokecatalogo.Models.Ataque", b =>
                {
                    b.HasOne("pokecatalogo.Models.Tipo", "Tipo")
                        .WithMany()
                        .HasForeignKey("TipoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tipo");
                });

            modelBuilder.Entity("pokecatalogo.Models.Equipa", b =>
                {
                    b.HasOne("pokecatalogo.Models.Utilizadores", "Dono")
                        .WithMany()
                        .HasForeignKey("DonoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dono");
                });

            modelBuilder.Entity("pokecatalogo.Models.Evolucao", b =>
                {
                    b.HasOne("pokecatalogo.Models.Pokemon", "PokemonOrigem")
                        .WithMany("OrigemEvolucoes")
                        .HasForeignKey("PokemonFk1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pokecatalogo.Models.Pokemon", "PokemonEvoluido")
                        .WithMany("FinalEvolucoes")
                        .HasForeignKey("PokemonFk2");

                    b.Navigation("PokemonEvoluido");

                    b.Navigation("PokemonOrigem");
                });

            modelBuilder.Entity("pokecatalogo.Models.Habilidade", b =>
                {
                    b.HasOne("pokecatalogo.Models.Pokemon", "Pokemon")
                        .WithMany()
                        .HasForeignKey("PokemonFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pokemon");
                });

            modelBuilder.Entity("pokecatalogo.Models.LocalizacaoJogo", b =>
                {
                    b.HasOne("pokecatalogo.Models.Jogo", "Jogo")
                        .WithMany("LocalizacaoJogos")
                        .HasForeignKey("JogoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pokecatalogo.Models.Localizacao", "Localizacao")
                        .WithMany("LocalizacaoJogos")
                        .HasForeignKey("LocalizacaoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Jogo");

                    b.Navigation("Localizacao");
                });

            modelBuilder.Entity("pokecatalogo.Models.Pokemon", b =>
                {
                    b.HasOne("pokecatalogo.Models.Localizacao", null)
                        .WithMany("Pokemons")
                        .HasForeignKey("LocalizacaoId");

                    b.HasOne("pokecatalogo.Models.Tipo", "Tipo1")
                        .WithMany("PokemonsPrimarios")
                        .HasForeignKey("Tipo1Fk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pokecatalogo.Models.Tipo", "Tipo2")
                        .WithMany("PokemonsSecundarios")
                        .HasForeignKey("Tipo2Fk");

                    b.Navigation("Tipo1");

                    b.Navigation("Tipo2");
                });

            modelBuilder.Entity("pokecatalogo.Models.PokemonAtaque", b =>
                {
                    b.HasOne("pokecatalogo.Models.Ataque", "Ataque")
                        .WithMany("PokemonAtaques")
                        .HasForeignKey("AtaqueFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pokecatalogo.Models.Pokemon", "Pokemon")
                        .WithMany("PokemonAtaques")
                        .HasForeignKey("PokemonFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ataque");

                    b.Navigation("Pokemon");
                });

            modelBuilder.Entity("pokecatalogo.Models.PokemonEquipa", b =>
                {
                    b.HasOne("pokecatalogo.Models.Equipa", "Equipa")
                        .WithMany("PokemonEquipas")
                        .HasForeignKey("EquipaFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pokecatalogo.Models.Pokemon", "Pokemon")
                        .WithMany()
                        .HasForeignKey("PokemonFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipa");

                    b.Navigation("Pokemon");
                });

            modelBuilder.Entity("pokecatalogo.Models.PokemonHabilidade", b =>
                {
                    b.HasOne("pokecatalogo.Models.Habilidade", "Habilidade")
                        .WithMany("PokemonHabilidades")
                        .HasForeignKey("HabilidadeFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pokecatalogo.Models.Pokemon", "Pokemon")
                        .WithMany("PokemonHabilidades")
                        .HasForeignKey("PokemonFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Habilidade");

                    b.Navigation("Pokemon");
                });

            modelBuilder.Entity("pokecatalogo.Models.PokemonLocalizacao", b =>
                {
                    b.HasOne("pokecatalogo.Models.Localizacao", "Localizacao")
                        .WithMany()
                        .HasForeignKey("LocalizacaoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pokecatalogo.Models.Pokemon", "Pokemon")
                        .WithMany("PokemonLocalizacoes")
                        .HasForeignKey("PokemonFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Localizacao");

                    b.Navigation("Pokemon");
                });

            modelBuilder.Entity("pokecatalogo.Models.PokemonStats", b =>
                {
                    b.HasOne("pokecatalogo.Models.Pokemon", "Pokemon")
                        .WithMany("PokemonStats")
                        .HasForeignKey("PokemonFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pokemon");
                });

            modelBuilder.Entity("pokecatalogo.Models.Ataque", b =>
                {
                    b.Navigation("PokemonAtaques");
                });

            modelBuilder.Entity("pokecatalogo.Models.Equipa", b =>
                {
                    b.Navigation("PokemonEquipas");
                });

            modelBuilder.Entity("pokecatalogo.Models.Habilidade", b =>
                {
                    b.Navigation("PokemonHabilidades");
                });

            modelBuilder.Entity("pokecatalogo.Models.Jogo", b =>
                {
                    b.Navigation("LocalizacaoJogos");
                });

            modelBuilder.Entity("pokecatalogo.Models.Localizacao", b =>
                {
                    b.Navigation("LocalizacaoJogos");

                    b.Navigation("Pokemons");
                });

            modelBuilder.Entity("pokecatalogo.Models.Pokemon", b =>
                {
                    b.Navigation("FinalEvolucoes");

                    b.Navigation("OrigemEvolucoes");

                    b.Navigation("PokemonAtaques");

                    b.Navigation("PokemonHabilidades");

                    b.Navigation("PokemonLocalizacoes");

                    b.Navigation("PokemonStats");
                });

            modelBuilder.Entity("pokecatalogo.Models.Tipo", b =>
                {
                    b.Navigation("PokemonsPrimarios");

                    b.Navigation("PokemonsSecundarios");
                });
#pragma warning restore 612, 618
        }
    }
}
